<%
 import AWS.CodeGen.QueryHelpers

 # Include the auto generation comment below
 %>
# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
# See https://github.com/jkakar/aws-codegen for more details.

defmodule <%= context |> module_name() %> do
  @moduledoc """
<%= context.docstring %>
  """

use ExAws.Utils,
  format_type: :xml,
  non_standard_keys: %{
    stack_name: "StackName",
    role_arn: "RoleARN",
    template_url: "TemplateURL",
    next_token: "NextToken",
    parameters: "Parameters.member",
    resource_types: "ResourceTypes.member",
    retain_resources: "RetainResources.member",
    notification_arns: "NotificationARN.member",
    skip_resources: "ResourcesToSkip.member"
  }

@version "2010-05-15"

<%= for action <- context.actions do %>
  @doc """
<%= action.docstring %>
  """
  def <%= action.function_name %>(<%= param_list(action) %>) do
    <%= options_input(action) %>
    |> Enum.flat_map(&format_param/1)
    |> request(<%= ":#{action.function_name}" %>)
  end
<% end %>

  ########################
  ### Helper Functions ###
  ########################

  defp request(params, action) do
    action_string = action |> Atom.to_string |> Macro.camelize

    %ExAws.Operation.Query{
      path: "/",
      params: params |> filter_nil_params |> Map.put("Action", action_string) |> Map.put("Version", @version),
      service: <%= ":#{context.signing_name}" %>,
      action: action,
      parser: &ExAws.Cloudformation.Parsers.parse/3
    }
  end

  ########################
  ### Format Functions ###
  ########################

  defp format_param({:stack_status_filters, filters}) do
    filters
    |> Enum.map(&upcase/1)
    |> format(prefix: "StackStatusFilter.member")
  end

  # TODO !deprecated! Remove in 1.2
  defp format_param({:status_filter, filters}) do
    IO.warn(
      "(ExAws.Cloudformation) The :status_filter param is DEPRECATED! Please use :stack_status_filters instead
        For example: list_stacks(status_filter: [...]) should be changed to list_stacks(stack_status_filters: [...])"
    )
    format_param({:stack_status_filters, filters})
  end
  # TODO !deprecated! Remove in 1.2


  defp format_param({:capabilities, capabilities}) do
    capabilities
    |> Enum.map(&upcase/1)
    |> format(prefix: "Capabilities.member")
  end

  defp format_param({:tags, tags}) do
    tags
    |> Enum.map(fn {key, value} -> [key: maybe_stringify(key), value: value] end)
    |> format(prefix: "Tags.member")
  end

  defp format_param({:template_stage, template_stage}) do
    [{"TemplateStage", camelize_key(template_stage)}]
  end

  defp format_param({key, parameters}) do
    format([{key, parameters}])
  end

#  defp whitelist_input(input, action) do
#    whitelist = action.input.shape.members |> Map.keys |> List.delete("ClientRequestToken")
#    input |> Map.take(whitelist)
#  end

end

